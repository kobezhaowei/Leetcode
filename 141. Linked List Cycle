Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

You can make use of Floyd's cycle-finding algorithm, also know as tortoise and hare algorithm. 
The idea is to have two references to the list and move them at different speeds. 
Move one forward by 1 node and the other by 2 nodes. If the linked list has a loop they will definitely meet.

How to detect a loop in a linked list?
http://stackoverflow.com/questions/2663115/how-to-detect-a-loop-in-a-linked-list

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        if(head==null) return false;
        ListNode walker = head;
        ListNode runner = head;
        while(runner.next!=null && runner.next.next!=null) {
            walker = walker.next;
            runner = runner.next.next;
            if(walker==runner) return true;
        }
        return false;
        
    }
